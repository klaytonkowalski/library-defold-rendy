--------------------------------------------------------------------------------
-- License
--------------------------------------------------------------------------------

-- Copyright (c) 2024 Klayton Kowalski

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- Information
--------------------------------------------------------------------------------

-- GitHub: https://github.com/klaytonkowalski/library-defold-rendy

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local rendy = require "rendy.rendy"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

local message_acquire_input_focus = hash("acquire_input_focus")

local id_label = hash("/label")
local id_logo = hash("/logo")
local id_rendy = hash("/rendy")

local key_1 = hash("key_1")
local key_2 = hash("key_2")
local key_3 = hash("key_3")
local key_4 = hash("key_4")
local key_esc = hash("key_esc")

--------------------------------------------------------------------------------
-- Variables
--------------------------------------------------------------------------------

local action_screen_x = nil
local action_screen_y = nil

--------------------------------------------------------------------------------
-- Local Functions
--------------------------------------------------------------------------------

local function update_label()
	local text = ""
	-- Stringify the camera's resize mode.
	if rendy.get(id_rendy, "resize_mode_center") then
		text = text .. "Resize Mode: Center"
	elseif rendy.get(id_rendy, "resize_mode_expand") then
		text = text .. "Resize Mode: Expand"
	elseif rendy.get(id_rendy, "resize_mode_stretch") then
		text = text .. "Resize Mode: Stretch"
	end
	-- Stringify the logo's screen position.
	local screen_position = rendy.world_to_screen(id_rendy, go.get_position(id_logo))
	if screen_position then
		text = text .. "\n" .. "Logo Screen Position: (" .. string.format("%.0f", screen_position.x) .. ", " .. string.format("%.0f", screen_position.y) .. ")"
	else
		text = text .. "\n" .. "Logo Screen Position: (nil, nil)"
	end
	-- Stringify the cursor's world position.
	local world_position = rendy.screen_to_world(id_rendy, vmath.vector3(action_screen_x, action_screen_y, 0))
	if world_position then
		text = text .. "\n" .. "Cursor World Position: (" .. string.format("%.0f", world_position.x) .. ", " .. string.format("%.0f", world_position.y) .. ")"
	else
		text = text .. "\n" .. "Cursor World Position: (nil, nil)"
	end
	-- Update the label.
	label.set_text(id_label, text)
end

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init()
	msg.post(msg.url(), message_acquire_input_focus)
	go.animate(id_logo, "euler.z", go.PLAYBACK_LOOP_BACKWARD, 360, go.EASING_LINEAR, 3)
end

function update()
	update_label()
end

function on_input(_, action_id, action)
	-- Get the cursor's position.
	if not action_id then
		action_screen_x = action.screen_x
		action_screen_y = action.screen_y
	end
	-- Update the camera's resize mode.
	if action.pressed then
		if action_id == key_1 then
			rendy.set(id_rendy, "resize_mode_center", true)
		elseif action_id == key_2 then
			rendy.set(id_rendy, "resize_mode_expand", true)
		elseif action_id == key_3 then
			rendy.set(id_rendy, "resize_mode_stretch", true)
		elseif action_id == key_4 then
			rendy.shake(id_rendy, 150, 10, 0.5, 0.75)
		elseif action_id == key_esc then
			sys.exit(0)
		end
	end
end