--------------------------------------------------------------------------------
-- License
--------------------------------------------------------------------------------

-- Copyright (c) 2024 Klayton Kowalski

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- Information
--------------------------------------------------------------------------------

-- GitHub: https://github.com/whiteboxdev/library-defold-rendy

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local rendy = require "rendy.rendy"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

local message_acquire_input_focus = hash("acquire_input_focus")
local message_release_input_focus = hash("release_input_focus")

local diagonal_scaler = 1 / math.sqrt(2)

--------------------------------------------------------------------------------
-- Properties
--------------------------------------------------------------------------------

-- The following properties are for configuration purposes only.
-- Upon calling `rendy.create_camera()`, they will be extracted from this script.
go.property("active", true)
go.property("orthographic", true)
go.property("resize_mode_center", true)
go.property("resize_mode_expand", false)
go.property("resize_mode_stretch", false)
go.property("experimental_controls", false)
go.property("experimental_speed", 100)
go.property("render_order", 1)
go.property("viewport_x", 0)
go.property("viewport_y", 0)
go.property("viewport_width", 960)
go.property("viewport_height", 540)
go.property("resolution_width", 960)
go.property("resolution_height", 540)
go.property("z_min", -1)
go.property("z_max", 1)
go.property("zoom", 1)
go.property("field_of_view", 45)

--------------------------------------------------------------------------------
-- Local Functions
--------------------------------------------------------------------------------

-- Updates orthographic camera controls.
local function update_orthographic(self, dt)
	if self.input.left + self.input.right ~= 0 or self.input.up + self.input.down ~= 0 then
		local camera_id = go.get_id()
		local position = go.get_position()
		local speed = self.input.left + self.input.right ~= 0 and self.camera.experimental_speed * diagonal_scaler or self.camera.experimental_speed
		local velocity = vmath.vector3((-self.input.left + self.input.right) * speed, (self.input.up - self.input.down) * speed, 0)
		go.set_position(position + velocity * dt)
	end
end

-- Updates perspective camera controls.
local function update_perspective(self, dt)
	if self.input.screen_dx ~= 0 or self.input.screen_dy ~= 0 then
		local rotation = go.get_rotation()
		rotation = rotation * vmath.quat_rotation_x(self.input.screen_dy * 0.002)
		rotation = rotation * vmath.quat_rotation_y(-self.input.screen_dx * 0.002)
		go.set_rotation(rotation)
		local euler_x = go.get(go.get_id(), "euler.x")
		if euler_x < -89 then
			go.set(go.get_id(), "euler.x", -89)
		elseif euler_x > 89 then
			go.set(go.get_id(), "euler.x", 89)
		end
		self.input.screen_dx = 0
		self.input.screen_dy = 0
	end
	if self.input.left + self.input.right ~= 0 or self.input.up + self.input.down ~= 0 then
		local position = go.get_position()
		local rotation = go.get_rotation()
		local absolute_direction = vmath.vector3(-self.input.left + self.input.right, 0, -self.input.up + self.input.down)
		local relative_direction = vmath.normalize(vmath.rotate(rotation, absolute_direction))
		go.set_position(position + relative_direction * self.camera.experimental_speed * dt)
	end
end

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

-- Creates the camera and initializes variables that are only relevant to the rendy.script file.
function init(self)
	rendy.create_camera(go.get_id())
	self.camera = rendy.cameras[go.get_id()]
	self.input =
	{
		up = 0,
		down = 0,
		left = 0,
		right = 0,
		screen_dx = 0,
		screen_dy = 0
	}
end

-- Destroys the camera.
function final(self)
	rendy.destroy_camera(go.get_id())
end

-- Handles camera movement if experimental controls are enabled.
function update(self, dt)
	if self.camera.experimental_controls then
		if self.camera.orthographic then
			update_orthographic(self, dt)
		else
			update_perspective(self, dt)
		end
	end
end

-- Handles camera movement if experimental controls are enabled.
function on_input(self, action_id, action)
	if not action_id then
		self.input.screen_dx = action.screen_dx
		self.input.screen_dy = action.screen_dy
	end
	if action.pressed then
		if action_id == hash("key_w") then
			self.input.up = 1
		elseif action_id == hash("key_a") then
			self.input.left = 1
		elseif action_id == hash("key_s") then
			self.input.down = 1
		elseif action_id == hash("key_d") then
			self.input.right = 1
		end
	elseif action.released then
		if action_id == hash("key_w") then
			self.input.up = 0
		elseif action_id == hash("key_a") then
			self.input.left = 0
		elseif action_id == hash("key_s") then
			self.input.down = 0
		elseif action_id == hash("key_d") then
			self.input.right = 0
		end
	end
end