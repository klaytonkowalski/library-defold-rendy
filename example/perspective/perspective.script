--------------------------------------------------------------------------------
-- License
--------------------------------------------------------------------------------

-- Copyright (c) 2024 Klayton Kowalski

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- Information
--------------------------------------------------------------------------------

-- GitHub: https://github.com/klaytonkowalski/library-defold-rendy

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local rendy = require "rendy.rendy"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

local message_acquire_input_focus = hash("acquire_input_focus")
local message_move_camera = hash("move_camera")

local key_esc = hash("key_esc")
local key_w = hash("key_w")
local key_a = hash("key_a")
local key_s = hash("key_s")
local key_d = hash("key_d")

local go_gui = hash("/gui")
local go_logo = hash("/logo")
local go_rendy = hash("/rendy")

local camera_move_speed = 10
local camera_rotate_speed = 0.003

--------------------------------------------------------------------------------
-- Variables
--------------------------------------------------------------------------------

local action_screen_x = nil
local action_screen_y = nil
local action_screen_dx = nil
local action_screen_dy = nil

local keys = { w = 0, a = 0, s = 0, d = 0 }

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init(self)
	window.set_mouse_lock(true)
	msg.post(msg.url(), message_acquire_input_focus)
	go.animate(go_logo, "euler.x", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 10)
	go.animate(go_logo, "euler.y", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 10)
	go.animate(go_logo, "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 10)
	local camera_position = go.get_position(go_rendy)
	go.set(msg.url(nil, go_logo, "model"), "light", vmath.vector4(camera_position.x, camera_position.y, camera_position.z, 0))
end

function update(self, dt)
	if action_screen_dx ~= 0 or action_screen_dy ~= 0 then
		local camera_rotation = go.get_rotation(go_rendy)
		camera_rotation = camera_rotation * vmath.quat_rotation_x(action_screen_dy * camera_rotate_speed)
		camera_rotation = camera_rotation * vmath.quat_rotation_y(-action_screen_dx * camera_rotate_speed)
		go.set_rotation(camera_rotation, go_rendy)
	end
	local direction = vmath.vector3(keys.a + keys.d, 0, keys.w + keys.s)
	if direction ~= vmath.vector3() then
		local camera_position = go.get_position(go_rendy)
		local camera_rotation = go.get_rotation(go_rendy)
		local rotated_direction = vmath.normalize(vmath.rotate(camera_rotation, direction))
		camera_position = camera_position + rotated_direction * camera_move_speed * dt
		go.set_position(camera_position, go_rendy)
		go.set(msg.url(nil, go_logo, "model"), "light", vmath.vector4(camera_position.x, camera_position.y, camera_position.z, 0))
	end
	local screen_x, screen_y = rendy.world_to_screen(go_rendy, vmath.vector3())
	msg.post(msg.url(nil, go_gui, "gui"), message_move_camera, { screen_x = screen_x, screen_y = screen_y })
	action_screen_dx = 0
	action_screen_dy = 0
end

function on_input(self, action_id, action)
	if not action_id then
		action_screen_x = action.screen_x
		action_screen_y = action.screen_y
		action_screen_dx = action.screen_dx
		action_screen_dy = action.screen_dy
	elseif action.pressed then
		if action_id == key_esc then
			sys.exit(0)
		elseif action_id == key_w then
			keys.w = -1
		elseif action_id == key_a then
			keys.a = -1
		elseif action_id == key_s then
			keys.s = 1
		elseif action_id == key_d then
			keys.d = 1
		end
	elseif action.released then
		if action_id == key_w then
			keys.w = 0
		elseif action_id == key_a then
			keys.a = 0
		elseif action_id == key_s then
			keys.s = 0
		elseif action_id == key_d then
			keys.d = 0
		end
	end
end