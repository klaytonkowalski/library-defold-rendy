--------------------------------------------------------------------------------
-- License
--------------------------------------------------------------------------------

-- Copyright (c) 2024 Klayton Kowalski

-- This software is provided 'as-is', without any express or implied warranty.
-- In no event will the authors be held liable for any damages arising from the use of this software.

-- Permission is granted to anyone to use this software for any purpose,
-- including commercial applications, and to alter it and redistribute it freely,
-- subject to the following restrictions:

-- 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--    If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.

-- 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.

-- 3. This notice may not be removed or altered from any source distribution.

--------------------------------------------------------------------------------
-- Information
--------------------------------------------------------------------------------

-- GitHub: https://github.com/klaytonkowalski/library-defold-rendy

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------

local rendy = require "rendy.rendy"

--------------------------------------------------------------------------------
-- Constants
--------------------------------------------------------------------------------

local message_acquire_input_focus = hash("acquire_input_focus")
local message_move_cursor = hash("move_cursor")

local go_gui = hash("/gui")
local go_logo = hash("/logo")
local go_rendy_top_left = hash("/rendy_top_left")
local go_rendy_top_right = hash("/rendy_top_right")
local go_rendy_bottom_left = hash("/rendy_bottom_left")

local resize_modes =
{
	[go_rendy_top_left] = "Center",
	[go_rendy_top_right] = "Expand",
	[go_rendy_bottom_left] = "Stretch"
}

--------------------------------------------------------------------------------
-- Variables
--------------------------------------------------------------------------------

local action_screen_x = nil
local action_screen_y = nil

--------------------------------------------------------------------------------
-- Engine Functions
--------------------------------------------------------------------------------

function init(self)
	msg.post(msg.url(), message_acquire_input_focus)
	go.animate(msg.url(nil, go_rendy_top_left, "script"), "zoom", go.PLAYBACK_LOOP_PINGPONG, 2, go.EASING_INOUTQUAD, 3)
	go.animate(msg.url(nil, go_rendy_top_right, "script"), "zoom", go.PLAYBACK_LOOP_PINGPONG, 4, go.EASING_INOUTQUAD, 6)
	go.animate(msg.url(nil, go_rendy_bottom_left, nil), "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 3)
end

function update(self, dt)
	local camera_ids = rendy.get_camera_ids(action_screen_x, action_screen_y)
	if #camera_ids == 0 then
		msg.post(msg.url(nil, go_gui, "gui"), message_move_cursor, { camera_id = "nil", resize_mode = "nil", screen_x = "nil", screen_y = "nil", world_x = "nil", world_y = "nil" })
	else
		local screen_x, screen_y = rendy.world_to_screen(camera_ids[1], go.get_world_position(go_logo))
		if screen_x ~= nil and screen_y ~= nil then
			screen_x = string.format("%.0f", screen_x)
			screen_y = string.format("%.0f", screen_y)
		end
		local world_x, world_y = rendy.screen_to_world(camera_ids[1], action_screen_x, action_screen_y)
		if world_x ~= nil and world_y ~= nil then
			go.set_position(vmath.vector3(world_x, world_y, 0), go_logo)
			world_x = string.format("%.0f", world_x)
			world_y = string.format("%.0f", world_y)
		end
		msg.post(msg.url(nil, go_gui, "gui"), message_move_cursor, { camera_id = camera_ids[1], resize_mode = resize_modes[camera_ids[1]], screen_x = screen_x or "nil", screen_y = screen_y or "nil", world_x = world_x or "nil", world_y = world_y or "nil" })
	end
end

function on_input(self, action_id, action)
	if not action_id then
		action_screen_x = action.screen_x
		action_screen_y = action.screen_y
	end
end